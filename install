#!/bin/bash

LOLSSH_LEAD='### BEGIN LOLSSH GENERATED CONTENT'
LOLSSH_TAIL='### END LOLSSH GENERATED CONTENT'

update_file() {
    contentsfile=$1
    targetfile=$2
    sed --posix -i.bak -e "/^${LOLSSH_LEAD}$/,/^$LOLSSH_TAIL$/{ /^${LOLSSH_LEAD}$/{p; r ${contentsfile}
            }; /^${LOLSSH_TAIL}$/p; d }" ${targetfile}
}

create_file() {
    contentsfile=$1
    targetfile=$2
    echo "$( echo -e "\n${LOLSSH_LEAD}\n$( cat ${contentsfile} )\n${LOLSSH_TAIL}\n\n" \
        | cat - ${targetfile} )" \
        > ${targetfile}
}

if egrep --quiet "$LOLSSH_LEAD" ~/.ssh/config; then
    echo "Updating ssh-config entry"
    update_file ./conf/ssh-config ~/.ssh/config
else
    echo "Creating ssh-config entry"
    if [ ! -d ~/.ssh/ ]; then
        mkdir ~/.ssh/
    fi
    if [ ! -e ~/.ssh/config ]; then
        touch ~/.ssh/config
        chmod 700 ~/.ssh/config
    fi
    create_file ./conf/ssh-config ~/.ssh/config
fi

if ! grep --quiet "templatedir" ~/.gitconfig; then
    echo "Creating gitconfig"
    if [ ! -e ~/.gitconfig ]; then
        touch ~/.gitconfig
    fi
    create_file ./conf/gitconfig ~/.gitconfig
fi

templatedir=$( grep templatedir ~/.gitconfig | cut -d'=' -f2 | xargs echo )
if [ ! -d ${templatedir}/hooks ]; then
    mkdir ${templatedir}/hooks
fi
if grep --quiet "$LOLSSH_LEAD" ${templatedir}/hooks/post-commit ; then
    echo "Updating git post-commit hook in ${templatedir}"
    update_file ./conf/post-commit ${templatedir}/hooks/post-commit
else
    echo "Creating new git post-commit hook in ${templatedir}"
    create_file ./conf/post-commit ${templatedir}/hooks/post-commit
fi

echo "Checking and removing any existing lolcommits hook in post-commit hook"
sed -i.bak \
    '/### lolcommits hook (begin) ###/,/###  lolcommits hook (end)  ###/d' \
    ${templatedir}/hooks/post-commit 
